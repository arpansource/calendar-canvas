"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[731],{3423:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"types","title":"Type Reference","description":"Complete type reference for Calendar Canvas library.","source":"@site/docs/types.md","sourceDirName":".","slug":"/types","permalink":"/calendar-canvas/hi/docs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/arpansource/calendar-canvas/tree/docs/docs/types.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"Type Reference"},"sidebar":"tutorialSidebar","previous":{"title":"Minimal Example","permalink":"/calendar-canvas/hi/docs/examples/minimal"},"next":{"title":"Contributing","permalink":"/calendar-canvas/hi/docs/contributing"}}');var r=a(4848),s=a(8453);const l={sidebar_position:6,sidebar_label:"Type Reference"},o="Type Reference",i={},d=[{value:"Core Types",id:"core-types",level:2},{value:"CalendarCanvasEvent",id:"calendar-canvas-event",level:3},{value:"CalendarCanvasEventOffset",id:"calendar-canvas-event-offset",level:3},{value:"CalendarCanvasView",id:"calendar-canvas-view",level:3},{value:"Base Interfaces",id:"base-interfaces",level:2},{value:"IWrapper",id:"iwrapper",level:3},{value:"IClassName",id:"iclassname",level:3},{value:"ICssProperties",id:"icss-properties",level:3},{value:"Icon",id:"icon",level:3},{value:"BoxPositionMeta",id:"box-position-meta",level:3},{value:"Component Props",id:"component-props",level:2},{value:"CalendarCanvasProps",id:"calendar-canvas-props",level:3},{value:"CalendarHeaderProps",id:"calendar-header-props",level:3},{value:"TimeGutterProps",id:"time-gutter-props",level:3},{value:"CalendarContentWrapperProps",id:"calendar-content-wrapper-props",level:3},{value:"CalendarContentHeaderProps",id:"calendar-content-header-props",level:3},{value:"MonthContentHeaderProps",id:"month-content-header-props",level:3},{value:"WeekHeaderLabelProps",id:"week-header-label-props",level:3},{value:"WeekContentHeaderProps",id:"week-content-header-props",level:3},{value:"TimeFramesProps",id:"time-frames-props",level:3},{value:"DayLayoutProps",id:"day-layout-props",level:3},{value:"DayTemplateProps",id:"day-template-props",level:3},{value:"CalendarDayContentProps",id:"calendar-day-content-props",level:3},{value:"WeekLayoutProps",id:"week-layout-props",level:3},{value:"WeekTemplateProps",id:"week-template-props",level:3},{value:"CalendarWeekContentProps",id:"calendar-week-content-props",level:3},{value:"MonthLayoutProps",id:"month-layout-props",level:3},{value:"MonthTemplateProps",id:"month-template-props",level:3},{value:"CalendarContentProps",id:"calendar-content-props",level:3},{value:"Context Types",id:"context-types",level:2},{value:"CalendarCanvasContext",id:"calendar-canvas-context",level:3},{value:"CalendarCanvasAction",id:"calendar-canvas-action",level:3},{value:"Hook Types",id:"hook-types",level:2},{value:"UseCalendarReturnType",id:"use-calendar-return-type",level:3},{value:"UseShellEvents",id:"use-shell-events",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"type-reference",children:"Type Reference"})}),"\n",(0,r.jsx)(n.p,{children:"Complete type reference for Calendar Canvas library."}),"\n",(0,r.jsx)(n.h2,{id:"core-types",children:"Core Types"}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-event",children:"CalendarCanvasEvent"}),"\n",(0,r.jsx)(n.p,{children:"Base interface that defines the structure of calendar events. Used to display and manage events throughout the calendar."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarCanvasEvent {\n  startDate: Date;\n  endDate: Date;\n  title: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-event-offset",children:"CalendarCanvasEventOffset"}),"\n",(0,r.jsx)(n.p,{children:"Defines positioning metrics for event rendering. Used internally to calculate and position events within the calendar grid."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarCanvasEventOffset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-view",children:"CalendarCanvasView"}),"\n",(0,r.jsx)(n.p,{children:"Defines available view types for the calendar. Used to switch between different calendar displays."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum CalendarCanvasView {\n  DAY = "day",\n  WEEK = "week",\n  MONTH = "month",\n}\n\ntype CalendarCanvasViewUnion = `${CalendarCanvasView}`;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"base-interfaces",children:"Base Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"iwrapper",children:"IWrapper"}),"\n",(0,r.jsx)(n.p,{children:"Base interface for components that need to wrap child elements. Provides type safety for React children."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface IWrapper {\n  children: React.ReactNode;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"iclassname",children:"IClassName"}),"\n",(0,r.jsx)(n.p,{children:"Base interface for components that accept custom CSS classes. Enables styling customization."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface IClassName {\n  className?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"icss-properties",children:"ICssProperties"}),"\n",(0,r.jsx)(n.p,{children:"Base interface for components that accept inline styles. Enables direct style manipulation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ICssProperties {\n  style?: React.CSSProperties;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"icon",children:"Icon"}),"\n",(0,r.jsx)(n.p,{children:"Type definition for SVG icon components. Used for navigation and action icons throughout the calendar."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type Icon = React.ComponentType<React.SVGProps<SVGSVGElement>>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"box-position-meta",children:"BoxPositionMeta"}),"\n",(0,r.jsx)(n.p,{children:"Defines positioning metadata for calendar elements. Used for layout calculations."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface BoxPositionMeta {\n  date: Date;\n  rowStart: number;\n  rowEnd: number;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"component-props",children:"Component Props"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Interfaces with generic type ",(0,r.jsx)(n.code,{children:"TCalendarCanvasEvent"})," allow extending the base event type with custom properties while maintaining type safety."]})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-props",children:"CalendarCanvasProps"}),"\n",(0,r.jsx)(n.p,{children:"Main props interface for the CalendarCanvas component. Controls the initial state and configuration of the calendar."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarCanvasProps<TCalendarCanvasEvent extends object = CalendarCanvasEvent> {\n  defaultDate?: Date;\n  events?: TCalendarCanvasEvent[];\n  defaultView?: CalendarCanvasViewUnion;\n  timegutter?: number;\n  children: React.ReactNode;\n  className?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-header-props",children:"CalendarHeaderProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for the calendar header component. Enables custom styling of the header section."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarHeaderProps extends IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"time-gutter-props",children:"TimeGutterProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for the time gutter component. Controls the appearance of time indicators in week and day views."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface TimeGutterProps extends ICssProperties, IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-content-wrapper-props",children:"CalendarContentWrapperProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for the main content wrapper. Provides structure for calendar content."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarContentWrapperProps extends IWrapper, IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-content-header-props",children:"CalendarContentHeaderProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for the content header component. Controls the appearance of the content header section."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarContentHeaderProps extends IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"month-content-header-props",children:"MonthContentHeaderProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for the month view header. Specific to month view display customization."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface MonthContentHeaderProps extends IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"week-header-label-props",children:"WeekHeaderLabelProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for week header labels. Controls the display of week day labels."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface WeekHeaderLabelProps extends IClassName {\n  date: Date;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"week-content-header-props",children:"WeekContentHeaderProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for week view header content. Enables customization of week view header display."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface WeekContentHeaderProps extends IClassName {\n  templates?: {\n    timeGutter?: React.FC<TimeGutterProps>;\n    weekLabel?: React.FC<WeekHeaderLabelProps>;\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"time-frames-props",children:"TimeFramesProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for time frame components. Controls the display of time slots in week and day views."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface TimeFramesProps extends IClassName, ICssProperties {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"day-layout-props",children:"DayLayoutProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for day view layout. Controls the structure and appearance of day view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface DayLayoutProps extends ICssProperties, IClassName {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"day-template-props",children:"DayTemplateProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for day view event templates. Enables custom rendering of events in day view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface DayTemplateProps<TCalendarCanvasEvent extends CalendarCanvasEvent = CalendarCanvasEvent> extends ICssProperties {\n  event?: TCalendarCanvasEvent;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-day-content-props",children:"CalendarDayContentProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for day view content. Controls the overall day view display and behavior."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarDayContentProps extends IClassName {\n  layout?: React.FC<DayLayoutProps>;\n  template?: React.FC<DayTemplateProps>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"week-layout-props",children:"WeekLayoutProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for week view layout. Controls the structure and appearance of week view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface WeekLayoutProps extends ICssProperties, IClassName {\n  slotDate?: Date;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"week-template-props",children:"WeekTemplateProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for week view event templates. Enables custom rendering of events in week view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface WeekTemplateProps<TCalendarCanvasEvent extends CalendarCanvasEvent = CalendarCanvasEvent> extends ICssProperties {\n  event?: TCalendarCanvasEvent;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-week-content-props",children:"CalendarWeekContentProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for week view content. Controls the overall week view display and behavior."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarWeekContentProps extends IClassName {\n  layout?: React.FC<WeekLayoutProps>;\n  template?: React.FC<WeekTemplateProps>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"month-layout-props",children:"MonthLayoutProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for month view layout. Controls the structure and appearance of month view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface MonthLayoutProps extends ICssProperties, IWrapper, IClassName {\n  slotDate?: Date;\n  dateInMonth?: boolean;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"month-template-props",children:"MonthTemplateProps"}),"\n",(0,r.jsx)(n.p,{children:"Props for month view event templates. Enables custom rendering of events in month view."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface MonthTemplateProps<TCalendarCanvasEvent extends CalendarCanvasEvent = CalendarCanvasEvent> extends ICssProperties {\n  event?: TCalendarCanvasEvent;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-content-props",children:"CalendarContentProps"}),"\n",(0,r.jsx)(n.p,{children:"Main props interface for calendar content. Controls the overall content display and templating."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarContentProps extends IClassName {\n  templates?: {\n    content?: {\n      week?: React.FC<WeekTemplateProps>;\n      day?: React.FC<DayTemplateProps>;\n      month?: React.FC<MonthTemplateProps>;\n    };\n    layout?: {\n      day?: React.FC<DayLayoutProps>;\n      month?: React.FC<MonthLayoutProps>;\n      week?: React.FC<WeekLayoutProps>;\n    };\n    timeFrames?: React.FC<TimeFramesProps>;\n  };\n  componentClasses?: {\n    contentWrapper?: string;\n    timeFrames?: string;\n    dayContent?: string;\n    weekContent?: string;\n    monthContent?: string;\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-types",children:"Context Types"}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-context",children:"CalendarCanvasContext"}),"\n",(0,r.jsx)(n.p,{children:"Main context interface for the calendar. Provides state and dispatch functions throughout the component tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface CalendarCanvasContext<TCalendarCanvasEvent extends CalendarCanvasEvent = CalendarCanvasEvent> {\n  date?: Date;\n  view?: CalendarCanvasViewUnion;\n  events?: TCalendarCanvasEvent[];\n  timegutter?: number;\n  dispatch?: (action: CalendarCanvasAction) => void;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calendar-canvas-action",children:"CalendarCanvasAction"}),"\n",(0,r.jsx)(n.p,{children:"Defines all possible actions for calendar state management. Used with the calendar reducer."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type CalendarCanvasAction =\n  | { type: "date:set"; value: Date }\n  | { type: "events:init"; value: CalendarCanvasEvent[] }\n  | { type: "view:set"; value: CalendarCanvasViewUnion }\n  | { type: "timegutter:set"; value: number };\n'})}),"\n",(0,r.jsx)(n.h2,{id:"hook-types",children:"Hook Types"}),"\n",(0,r.jsx)(n.h3,{id:"use-calendar-return-type",children:"UseCalendarReturnType"}),"\n",(0,r.jsx)(n.p,{children:"Return type for the useCalendar hook. Provides calendar state and utilities for calendar manipulation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface UseCalendarReturnType<TCalendarCanvasEvent extends CalendarCanvasEvent = CalendarCanvasEvent> {\n  date?: Date;\n  view?: CalendarCanvasViewUnion;\n  events?: TCalendarCanvasEvent[];\n  timegutter?: number;\n  setDate: (date: Date) => void;\n  nextDate: () => void;\n  prevDate: () => void;\n  viewToday: () => void;\n  setView: (view: CalendarCanvasViewUnion) => void;\n  getWeekDates: () => Date[];\n  getMonthDates: () => Date[];\n  getTimeFrames: () => Date[];\n  setTimeGutterWidth: (width: number) => void;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"use-shell-events",children:"UseShellEvents"}),"\n",(0,r.jsx)(n.p,{children:"Interface for shell event handling. Used for basic date-related event handling."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface UseShellEvents {\n  date: Date;\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["All interfaces extending ",(0,r.jsx)(n.code,{children:"IClassName"})," accept an optional ",(0,r.jsx)(n.code,{children:"className"})," prop for styling customization."]})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);